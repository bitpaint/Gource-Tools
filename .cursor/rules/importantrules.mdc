---
description: 
globs: 
alwaysApply: true
---
# Directives pour l'IA sur le Projet Gource-Tools

Nous travaillons dans un environnement Windows et utilisons PowerShell pour ex√©cuter les commandes. Assure-toi de toujours utiliser des commandes compatibles avec PowerShell sur Windows. √âvite d'utiliser des commandes ou syntaxes qui ne sont pas adapt√©es √† cet environnement, comme celles qui sont destin√©es √† d'autres syst√®mes ou √† d'autres types de terminal (par exemple, Bash). Si tu rencontres une erreur li√©e √† l'interpr√©tation des param√®tres ou √† l'ex√©cution d'une commande, pense √† v√©rifier si la syntaxe est correctement adapt√©e √† PowerShell. Par exemple, pour cr√©er plusieurs r√©pertoires, utilise New-Item et non mkdir

Ce document d√©finit les directives sp√©cifiques que l'assistant IA (Cursor) doit suivre lors du d√©veloppement du projet Gource-Tools.

## üìù Communication

- **Langue**: R√©pondre en fran√ßais, mais coder en anglais (commentaires inclus)
- **Style de r√©ponse**: Concis mais informatif, structur√© avec des sections claires
- **Suivi**: Commencer chaque session en actualisant la roadmap  et en indiquant clairement les prochaines √©tapes

## üõ†Ô∏è Pratiques de d√©veloppement

### Structure du code
- Architecture modulaire et orient√©e composants
- S√©paration claire des pr√©occupations (frontend/backend)
- Typage strict avec TypeScript
- Tests unitaires pour les fonctionnalit√©s critiques

### Conventions de nommage
- CamelCase pour les variables, fonctions et m√©thodes
- PascalCase pour les classes et composants React
- UPPER_SNAKE_CASE pour les constantes
- kebab-case pour les noms de fichiers

### Documentation
- Maintenir le README.md √† jour
- Documenter chaque module et composant principal
- Mettre √† jour la ROADMAP.md apr√®s chaque accomplissement majeur
- Ajouter des commentaires pour le code complexe uniquement

## üîÑ Flux de travail

1. **Planification**: D√©finir clairement les objectifs de la session
2. **Ex√©cution**: D√©velopper les composants ou fonctionnalit√©s planifi√©s
3. **Tests**: V√©rifier que le code fonctionne comme pr√©vu
4. **Documentation**: Mettre √† jour la documentation pertinente
5. **Revue**: Analyser ce qui a √©t√© accompli, mettre a jour les fichiers roadmap et readme et identifier les prochaines √©tapes

## üèóÔ∏è Architecture

### Frontend (React)
- Utiliser les hooks React pour la gestion d'√©tat
- Composants fonctionnels plut√¥t que classes
- Styled-components pour le styling
- √âtat global avec Context API ou Redux si n√©cessaire

### Backend (Node.js/Express)
- API RESTful bien structur√©e
- Middleware pour l'authentification et la validation
- Gestion des erreurs coh√©rente
- Structure MVC (Mod√®le-Vue-Contr√¥leur)

### Base de donn√©es
- Mod√®les SQLite bien d√©finis
- Migrations pour les changements de sch√©ma
- Validation des donn√©es

## üö´ Choses √† √©viter

- Ne pas sur-optimiser pr√©matur√©ment
- √âviter les d√©pendances inutiles
- Ne pas r√©p√©ter le code (principe DRY)
- √âviter les fonctions trop longues ou complexes

## üìà Processus de d√©veloppement recommand√©
CODER EN ANGLAIS
1. Commencer par la structure de base du projet
2. D√©velopper le backend et les mod√®les de donn√©es
3. Cr√©er l'interface utilisateur de base
4. Int√©grer les fonctionnalit√©s Gource progressivement
5. Ajouter les fonctionnalit√©s avanc√©es
6. Polir l'interface utilisateur
7. Pr√©parer le packaging et le d√©ploiement

## üîç Rappels pour chaque session

- V√©rifier la progression par rapport √† la [ROADMAP.md](mdc:ROADMAP.md)
- Indiquer clairement les prochaines √©tapes (commandes a lancer, test a effectuer)
- R√©sumer les accomplissements de la session , mettre a jour la roadmap, mettre a jour le @readme, mettre a jour les docs (si applicable)
- TRES IMPORTANT: indiquer le prochain prompt que l'utilisateur t'envoyer pour continuer le d√©veloppement, ou ce que je dois faire. Je suis l'assistant testeur et envoyeur de prompt, tu est le maitre du projet.